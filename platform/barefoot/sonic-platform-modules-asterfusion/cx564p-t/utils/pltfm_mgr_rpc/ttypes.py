#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class pltfm_mgr_sys_tmp_t(object):
    """
    Attributes:
     - tmp1
     - tmp2
     - tmp3
     - tmp4
     - tmp5
     - tmp6
     - tmp7
     - tmp8
     - tmp9
     - tmp10

    """


    def __init__(self, tmp1=None, tmp2=None, tmp3=None, tmp4=None, tmp5=None, tmp6=None, tmp7=None, tmp8=None, tmp9=None, tmp10=None,):
        self.tmp1 = tmp1
        self.tmp2 = tmp2
        self.tmp3 = tmp3
        self.tmp4 = tmp4
        self.tmp5 = tmp5
        self.tmp6 = tmp6
        self.tmp7 = tmp7
        self.tmp8 = tmp8
        self.tmp9 = tmp9
        self.tmp10 = tmp10

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.tmp1 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.tmp2 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.tmp3 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.tmp4 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.tmp5 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.tmp6 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.tmp7 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.tmp8 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.DOUBLE:
                    self.tmp9 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.DOUBLE:
                    self.tmp10 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pltfm_mgr_sys_tmp_t')
        if self.tmp1 is not None:
            oprot.writeFieldBegin('tmp1', TType.DOUBLE, 1)
            oprot.writeDouble(self.tmp1)
            oprot.writeFieldEnd()
        if self.tmp2 is not None:
            oprot.writeFieldBegin('tmp2', TType.DOUBLE, 2)
            oprot.writeDouble(self.tmp2)
            oprot.writeFieldEnd()
        if self.tmp3 is not None:
            oprot.writeFieldBegin('tmp3', TType.DOUBLE, 3)
            oprot.writeDouble(self.tmp3)
            oprot.writeFieldEnd()
        if self.tmp4 is not None:
            oprot.writeFieldBegin('tmp4', TType.DOUBLE, 4)
            oprot.writeDouble(self.tmp4)
            oprot.writeFieldEnd()
        if self.tmp5 is not None:
            oprot.writeFieldBegin('tmp5', TType.DOUBLE, 5)
            oprot.writeDouble(self.tmp5)
            oprot.writeFieldEnd()
        if self.tmp6 is not None:
            oprot.writeFieldBegin('tmp6', TType.DOUBLE, 6)
            oprot.writeDouble(self.tmp6)
            oprot.writeFieldEnd()
        if self.tmp7 is not None:
            oprot.writeFieldBegin('tmp7', TType.DOUBLE, 7)
            oprot.writeDouble(self.tmp7)
            oprot.writeFieldEnd()
        if self.tmp8 is not None:
            oprot.writeFieldBegin('tmp8', TType.DOUBLE, 8)
            oprot.writeDouble(self.tmp8)
            oprot.writeFieldEnd()
        if self.tmp9 is not None:
            oprot.writeFieldBegin('tmp9', TType.DOUBLE, 9)
            oprot.writeDouble(self.tmp9)
            oprot.writeFieldEnd()
        if self.tmp10 is not None:
            oprot.writeFieldBegin('tmp10', TType.DOUBLE, 10)
            oprot.writeDouble(self.tmp10)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pltfm_mgr_eeprom_t(object):
    """
    Attributes:
     - prod_name
     - prod_part_num
     - prod_ser_num
     - ext_mac_addr
     - sys_mfg_date
     - prod_ver
     - prod_sub_ver
     - prod_arch
     - onie_version
     - ext_mac_addr_size
     - sys_mfger
     - country_code
     - vendor_name
     - diag_version
     - serv_tag
     - asic_vendor
     - main_bd_version
     - come_version
     - ghc_bd0
     - ghc_bd1
     - resv
     - crc32

    """


    def __init__(self, prod_name=None, prod_part_num=None, prod_ser_num=None, ext_mac_addr=None, sys_mfg_date=None, prod_ver=None, prod_sub_ver=None, prod_arch=None, onie_version=None, ext_mac_addr_size=None, sys_mfger=None, country_code=None, vendor_name=None, diag_version=None, serv_tag=None, asic_vendor=None, main_bd_version=None, come_version=None, ghc_bd0=None, ghc_bd1=None, resv=None, crc32=None,):
        self.prod_name = prod_name
        self.prod_part_num = prod_part_num
        self.prod_ser_num = prod_ser_num
        self.ext_mac_addr = ext_mac_addr
        self.sys_mfg_date = sys_mfg_date
        self.prod_ver = prod_ver
        self.prod_sub_ver = prod_sub_ver
        self.prod_arch = prod_arch
        self.onie_version = onie_version
        self.ext_mac_addr_size = ext_mac_addr_size
        self.sys_mfger = sys_mfger
        self.country_code = country_code
        self.vendor_name = vendor_name
        self.diag_version = diag_version
        self.serv_tag = serv_tag
        self.asic_vendor = asic_vendor
        self.main_bd_version = main_bd_version
        self.come_version = come_version
        self.ghc_bd0 = ghc_bd0
        self.ghc_bd1 = ghc_bd1
        self.resv = resv
        self.crc32 = crc32

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.prod_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prod_part_num = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.prod_ser_num = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.ext_mac_addr = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.sys_mfg_date = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BYTE:
                    self.prod_ver = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.prod_sub_ver = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.prod_arch = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.onie_version = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I16:
                    self.ext_mac_addr_size = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.sys_mfger = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.country_code = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.vendor_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.diag_version = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.serv_tag = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.asic_vendor = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.main_bd_version = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.come_version = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.STRING:
                    self.ghc_bd0 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.ghc_bd1 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 21:
                if ftype == TType.STRING:
                    self.resv = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 22:
                if ftype == TType.I32:
                    self.crc32 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pltfm_mgr_eeprom_t')
        if self.prod_name is not None:
            oprot.writeFieldBegin('prod_name', TType.STRING, 1)
            oprot.writeString(self.prod_name.encode('utf-8') if sys.version_info[0] == 2 else self.prod_name)
            oprot.writeFieldEnd()
        if self.prod_part_num is not None:
            oprot.writeFieldBegin('prod_part_num', TType.STRING, 2)
            oprot.writeString(self.prod_part_num.encode('utf-8') if sys.version_info[0] == 2 else self.prod_part_num)
            oprot.writeFieldEnd()
        if self.prod_ser_num is not None:
            oprot.writeFieldBegin('prod_ser_num', TType.STRING, 3)
            oprot.writeString(self.prod_ser_num.encode('utf-8') if sys.version_info[0] == 2 else self.prod_ser_num)
            oprot.writeFieldEnd()
        if self.ext_mac_addr is not None:
            oprot.writeFieldBegin('ext_mac_addr', TType.STRING, 4)
            oprot.writeString(self.ext_mac_addr.encode('utf-8') if sys.version_info[0] == 2 else self.ext_mac_addr)
            oprot.writeFieldEnd()
        if self.sys_mfg_date is not None:
            oprot.writeFieldBegin('sys_mfg_date', TType.STRING, 5)
            oprot.writeString(self.sys_mfg_date.encode('utf-8') if sys.version_info[0] == 2 else self.sys_mfg_date)
            oprot.writeFieldEnd()
        if self.prod_ver is not None:
            oprot.writeFieldBegin('prod_ver', TType.BYTE, 6)
            oprot.writeByte(self.prod_ver)
            oprot.writeFieldEnd()
        if self.prod_sub_ver is not None:
            oprot.writeFieldBegin('prod_sub_ver', TType.STRING, 7)
            oprot.writeString(self.prod_sub_ver.encode('utf-8') if sys.version_info[0] == 2 else self.prod_sub_ver)
            oprot.writeFieldEnd()
        if self.prod_arch is not None:
            oprot.writeFieldBegin('prod_arch', TType.STRING, 8)
            oprot.writeString(self.prod_arch.encode('utf-8') if sys.version_info[0] == 2 else self.prod_arch)
            oprot.writeFieldEnd()
        if self.onie_version is not None:
            oprot.writeFieldBegin('onie_version', TType.STRING, 9)
            oprot.writeString(self.onie_version.encode('utf-8') if sys.version_info[0] == 2 else self.onie_version)
            oprot.writeFieldEnd()
        if self.ext_mac_addr_size is not None:
            oprot.writeFieldBegin('ext_mac_addr_size', TType.I16, 10)
            oprot.writeI16(self.ext_mac_addr_size)
            oprot.writeFieldEnd()
        if self.sys_mfger is not None:
            oprot.writeFieldBegin('sys_mfger', TType.STRING, 11)
            oprot.writeString(self.sys_mfger.encode('utf-8') if sys.version_info[0] == 2 else self.sys_mfger)
            oprot.writeFieldEnd()
        if self.country_code is not None:
            oprot.writeFieldBegin('country_code', TType.STRING, 12)
            oprot.writeString(self.country_code.encode('utf-8') if sys.version_info[0] == 2 else self.country_code)
            oprot.writeFieldEnd()
        if self.vendor_name is not None:
            oprot.writeFieldBegin('vendor_name', TType.STRING, 13)
            oprot.writeString(self.vendor_name.encode('utf-8') if sys.version_info[0] == 2 else self.vendor_name)
            oprot.writeFieldEnd()
        if self.diag_version is not None:
            oprot.writeFieldBegin('diag_version', TType.STRING, 14)
            oprot.writeString(self.diag_version.encode('utf-8') if sys.version_info[0] == 2 else self.diag_version)
            oprot.writeFieldEnd()
        if self.serv_tag is not None:
            oprot.writeFieldBegin('serv_tag', TType.STRING, 15)
            oprot.writeString(self.serv_tag.encode('utf-8') if sys.version_info[0] == 2 else self.serv_tag)
            oprot.writeFieldEnd()
        if self.asic_vendor is not None:
            oprot.writeFieldBegin('asic_vendor', TType.STRING, 16)
            oprot.writeString(self.asic_vendor.encode('utf-8') if sys.version_info[0] == 2 else self.asic_vendor)
            oprot.writeFieldEnd()
        if self.main_bd_version is not None:
            oprot.writeFieldBegin('main_bd_version', TType.STRING, 17)
            oprot.writeString(self.main_bd_version.encode('utf-8') if sys.version_info[0] == 2 else self.main_bd_version)
            oprot.writeFieldEnd()
        if self.come_version is not None:
            oprot.writeFieldBegin('come_version', TType.STRING, 18)
            oprot.writeString(self.come_version.encode('utf-8') if sys.version_info[0] == 2 else self.come_version)
            oprot.writeFieldEnd()
        if self.ghc_bd0 is not None:
            oprot.writeFieldBegin('ghc_bd0', TType.STRING, 19)
            oprot.writeString(self.ghc_bd0.encode('utf-8') if sys.version_info[0] == 2 else self.ghc_bd0)
            oprot.writeFieldEnd()
        if self.ghc_bd1 is not None:
            oprot.writeFieldBegin('ghc_bd1', TType.STRING, 20)
            oprot.writeString(self.ghc_bd1.encode('utf-8') if sys.version_info[0] == 2 else self.ghc_bd1)
            oprot.writeFieldEnd()
        if self.resv is not None:
            oprot.writeFieldBegin('resv', TType.STRING, 21)
            oprot.writeString(self.resv.encode('utf-8') if sys.version_info[0] == 2 else self.resv)
            oprot.writeFieldEnd()
        if self.crc32 is not None:
            oprot.writeFieldBegin('crc32', TType.I32, 22)
            oprot.writeI32(self.crc32)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pltfm_mgr_pwr_supply_info_t(object):
    """
    Attributes:
     - vin
     - vout
     - iout
     - pwr_out
     - fspeed
     - ffault
     - load_sharing
     - model
     - serial
     - rev
     - iin
     - pwr_in
     - temp

    """


    def __init__(self, vin=None, vout=None, iout=None, pwr_out=None, fspeed=None, ffault=None, load_sharing=None, model=None, serial=None, rev=None, iin=None, pwr_in=None, temp=None,):
        self.vin = vin
        self.vout = vout
        self.iout = iout
        self.pwr_out = pwr_out
        self.fspeed = fspeed
        self.ffault = ffault
        self.load_sharing = load_sharing
        self.model = model
        self.serial = serial
        self.rev = rev
        self.iin = iin
        self.pwr_in = pwr_in
        self.temp = temp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.vin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.vout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.iout = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.pwr_out = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.fspeed = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.ffault = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.load_sharing = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.model = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.serial = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.rev = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.iin = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.pwr_in = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.temp = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pltfm_mgr_pwr_supply_info_t')
        if self.vin is not None:
            oprot.writeFieldBegin('vin', TType.I32, 1)
            oprot.writeI32(self.vin)
            oprot.writeFieldEnd()
        if self.vout is not None:
            oprot.writeFieldBegin('vout', TType.I32, 2)
            oprot.writeI32(self.vout)
            oprot.writeFieldEnd()
        if self.iout is not None:
            oprot.writeFieldBegin('iout', TType.I32, 3)
            oprot.writeI32(self.iout)
            oprot.writeFieldEnd()
        if self.pwr_out is not None:
            oprot.writeFieldBegin('pwr_out', TType.I32, 4)
            oprot.writeI32(self.pwr_out)
            oprot.writeFieldEnd()
        if self.fspeed is not None:
            oprot.writeFieldBegin('fspeed', TType.I32, 5)
            oprot.writeI32(self.fspeed)
            oprot.writeFieldEnd()
        if self.ffault is not None:
            oprot.writeFieldBegin('ffault', TType.BOOL, 6)
            oprot.writeBool(self.ffault)
            oprot.writeFieldEnd()
        if self.load_sharing is not None:
            oprot.writeFieldBegin('load_sharing', TType.BOOL, 7)
            oprot.writeBool(self.load_sharing)
            oprot.writeFieldEnd()
        if self.model is not None:
            oprot.writeFieldBegin('model', TType.STRING, 8)
            oprot.writeString(self.model.encode('utf-8') if sys.version_info[0] == 2 else self.model)
            oprot.writeFieldEnd()
        if self.serial is not None:
            oprot.writeFieldBegin('serial', TType.STRING, 9)
            oprot.writeString(self.serial.encode('utf-8') if sys.version_info[0] == 2 else self.serial)
            oprot.writeFieldEnd()
        if self.rev is not None:
            oprot.writeFieldBegin('rev', TType.STRING, 10)
            oprot.writeString(self.rev.encode('utf-8') if sys.version_info[0] == 2 else self.rev)
            oprot.writeFieldEnd()
        if self.iin is not None:
            oprot.writeFieldBegin('iin', TType.I32, 11)
            oprot.writeI32(self.iin)
            oprot.writeFieldEnd()
        if self.pwr_in is not None:
            oprot.writeFieldBegin('pwr_in', TType.I32, 12)
            oprot.writeI32(self.pwr_in)
            oprot.writeFieldEnd()
        if self.temp is not None:
            oprot.writeFieldBegin('temp', TType.I32, 13)
            oprot.writeI32(self.temp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pltfm_mgr_pwr_rail_info_t(object):
    """
    Attributes:
     - vrail1
     - vrail2
     - vrail3
     - vrail4
     - vrail5
     - vrail6
     - vrail7
     - vrail8
     - vrail9
     - vrail10
     - vrail11
     - vrail12
     - vrail13
     - vrail14
     - vrail15
     - vrail16

    """


    def __init__(self, vrail1=None, vrail2=None, vrail3=None, vrail4=None, vrail5=None, vrail6=None, vrail7=None, vrail8=None, vrail9=None, vrail10=None, vrail11=None, vrail12=None, vrail13=None, vrail14=None, vrail15=None, vrail16=None,):
        self.vrail1 = vrail1
        self.vrail2 = vrail2
        self.vrail3 = vrail3
        self.vrail4 = vrail4
        self.vrail5 = vrail5
        self.vrail6 = vrail6
        self.vrail7 = vrail7
        self.vrail8 = vrail8
        self.vrail9 = vrail9
        self.vrail10 = vrail10
        self.vrail11 = vrail11
        self.vrail12 = vrail12
        self.vrail13 = vrail13
        self.vrail14 = vrail14
        self.vrail15 = vrail15
        self.vrail16 = vrail16

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.vrail1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.vrail2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.vrail3 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.vrail4 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.vrail5 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.vrail6 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.vrail7 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.vrail8 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.vrail9 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.vrail10 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.vrail11 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.vrail12 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.vrail13 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.I32:
                    self.vrail14 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I32:
                    self.vrail15 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.I32:
                    self.vrail16 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pltfm_mgr_pwr_rail_info_t')
        if self.vrail1 is not None:
            oprot.writeFieldBegin('vrail1', TType.I32, 1)
            oprot.writeI32(self.vrail1)
            oprot.writeFieldEnd()
        if self.vrail2 is not None:
            oprot.writeFieldBegin('vrail2', TType.I32, 2)
            oprot.writeI32(self.vrail2)
            oprot.writeFieldEnd()
        if self.vrail3 is not None:
            oprot.writeFieldBegin('vrail3', TType.I32, 3)
            oprot.writeI32(self.vrail3)
            oprot.writeFieldEnd()
        if self.vrail4 is not None:
            oprot.writeFieldBegin('vrail4', TType.I32, 4)
            oprot.writeI32(self.vrail4)
            oprot.writeFieldEnd()
        if self.vrail5 is not None:
            oprot.writeFieldBegin('vrail5', TType.I32, 5)
            oprot.writeI32(self.vrail5)
            oprot.writeFieldEnd()
        if self.vrail6 is not None:
            oprot.writeFieldBegin('vrail6', TType.I32, 6)
            oprot.writeI32(self.vrail6)
            oprot.writeFieldEnd()
        if self.vrail7 is not None:
            oprot.writeFieldBegin('vrail7', TType.I32, 7)
            oprot.writeI32(self.vrail7)
            oprot.writeFieldEnd()
        if self.vrail8 is not None:
            oprot.writeFieldBegin('vrail8', TType.I32, 8)
            oprot.writeI32(self.vrail8)
            oprot.writeFieldEnd()
        if self.vrail9 is not None:
            oprot.writeFieldBegin('vrail9', TType.I32, 9)
            oprot.writeI32(self.vrail9)
            oprot.writeFieldEnd()
        if self.vrail10 is not None:
            oprot.writeFieldBegin('vrail10', TType.I32, 10)
            oprot.writeI32(self.vrail10)
            oprot.writeFieldEnd()
        if self.vrail11 is not None:
            oprot.writeFieldBegin('vrail11', TType.I32, 11)
            oprot.writeI32(self.vrail11)
            oprot.writeFieldEnd()
        if self.vrail12 is not None:
            oprot.writeFieldBegin('vrail12', TType.I32, 12)
            oprot.writeI32(self.vrail12)
            oprot.writeFieldEnd()
        if self.vrail13 is not None:
            oprot.writeFieldBegin('vrail13', TType.I32, 13)
            oprot.writeI32(self.vrail13)
            oprot.writeFieldEnd()
        if self.vrail14 is not None:
            oprot.writeFieldBegin('vrail14', TType.I32, 14)
            oprot.writeI32(self.vrail14)
            oprot.writeFieldEnd()
        if self.vrail15 is not None:
            oprot.writeFieldBegin('vrail15', TType.I32, 15)
            oprot.writeI32(self.vrail15)
            oprot.writeFieldEnd()
        if self.vrail16 is not None:
            oprot.writeFieldBegin('vrail16', TType.I32, 16)
            oprot.writeI32(self.vrail16)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pltfm_mgr_fan_info_t(object):
    """
    Attributes:
     - fan_num
     - front_rpm
     - rear_rpm
     - percent
     - model
     - serial

    """


    def __init__(self, fan_num=None, front_rpm=None, rear_rpm=None, percent=None, model=None, serial=None,):
        self.fan_num = fan_num
        self.front_rpm = front_rpm
        self.rear_rpm = rear_rpm
        self.percent = percent
        self.model = model
        self.serial = serial

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.fan_num = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.front_rpm = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.rear_rpm = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.percent = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.model = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.serial = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pltfm_mgr_fan_info_t')
        if self.fan_num is not None:
            oprot.writeFieldBegin('fan_num', TType.I32, 1)
            oprot.writeI32(self.fan_num)
            oprot.writeFieldEnd()
        if self.front_rpm is not None:
            oprot.writeFieldBegin('front_rpm', TType.I32, 2)
            oprot.writeI32(self.front_rpm)
            oprot.writeFieldEnd()
        if self.rear_rpm is not None:
            oprot.writeFieldBegin('rear_rpm', TType.I32, 3)
            oprot.writeI32(self.rear_rpm)
            oprot.writeFieldEnd()
        if self.percent is not None:
            oprot.writeFieldBegin('percent', TType.I32, 4)
            oprot.writeI32(self.percent)
            oprot.writeFieldEnd()
        if self.model is not None:
            oprot.writeFieldBegin('model', TType.STRING, 5)
            oprot.writeString(self.model.encode('utf-8') if sys.version_info[0] == 2 else self.model)
            oprot.writeFieldEnd()
        if self.serial is not None:
            oprot.writeFieldBegin('serial', TType.STRING, 6)
            oprot.writeString(self.serial.encode('utf-8') if sys.version_info[0] == 2 else self.serial)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pltfm_mgr_cpld_info_t(object):
    """
    Attributes:
     - cpld_count
     - cpld1_ver
     - cpld2_ver
     - cpld3_ver
     - cpld4_ver
     - cpld5_ver

    """


    def __init__(self, cpld_count=None, cpld1_ver=None, cpld2_ver=None, cpld3_ver=None, cpld4_ver=None, cpld5_ver=None,):
        self.cpld_count = cpld_count
        self.cpld1_ver = cpld1_ver
        self.cpld2_ver = cpld2_ver
        self.cpld3_ver = cpld3_ver
        self.cpld4_ver = cpld4_ver
        self.cpld5_ver = cpld5_ver

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.cpld_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cpld1_ver = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cpld2_ver = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.cpld3_ver = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.cpld4_ver = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.cpld5_ver = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pltfm_mgr_cpld_info_t')
        if self.cpld_count is not None:
            oprot.writeFieldBegin('cpld_count', TType.I32, 1)
            oprot.writeI32(self.cpld_count)
            oprot.writeFieldEnd()
        if self.cpld1_ver is not None:
            oprot.writeFieldBegin('cpld1_ver', TType.STRING, 2)
            oprot.writeString(self.cpld1_ver.encode('utf-8') if sys.version_info[0] == 2 else self.cpld1_ver)
            oprot.writeFieldEnd()
        if self.cpld2_ver is not None:
            oprot.writeFieldBegin('cpld2_ver', TType.STRING, 3)
            oprot.writeString(self.cpld2_ver.encode('utf-8') if sys.version_info[0] == 2 else self.cpld2_ver)
            oprot.writeFieldEnd()
        if self.cpld3_ver is not None:
            oprot.writeFieldBegin('cpld3_ver', TType.STRING, 4)
            oprot.writeString(self.cpld3_ver.encode('utf-8') if sys.version_info[0] == 2 else self.cpld3_ver)
            oprot.writeFieldEnd()
        if self.cpld4_ver is not None:
            oprot.writeFieldBegin('cpld4_ver', TType.STRING, 5)
            oprot.writeString(self.cpld4_ver.encode('utf-8') if sys.version_info[0] == 2 else self.cpld4_ver)
            oprot.writeFieldEnd()
        if self.cpld5_ver is not None:
            oprot.writeFieldBegin('cpld5_ver', TType.STRING, 6)
            oprot.writeString(self.cpld5_ver.encode('utf-8') if sys.version_info[0] == 2 else self.cpld5_ver)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InvalidPltfmMgrOperation(TException):
    """
    Attributes:
     - code

    """


    def __init__(self, code=None,):
        super(InvalidPltfmMgrOperation, self).__setattr__('code', code)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.code, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        code = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            code=code,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('InvalidPltfmMgrOperation')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(pltfm_mgr_sys_tmp_t)
pltfm_mgr_sys_tmp_t.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'tmp1', None, None, ),  # 1
    (2, TType.DOUBLE, 'tmp2', None, None, ),  # 2
    (3, TType.DOUBLE, 'tmp3', None, None, ),  # 3
    (4, TType.DOUBLE, 'tmp4', None, None, ),  # 4
    (5, TType.DOUBLE, 'tmp5', None, None, ),  # 5
    (6, TType.DOUBLE, 'tmp6', None, None, ),  # 6
    (7, TType.DOUBLE, 'tmp7', None, None, ),  # 7
    (8, TType.DOUBLE, 'tmp8', None, None, ),  # 8
    (9, TType.DOUBLE, 'tmp9', None, None, ),  # 9
    (10, TType.DOUBLE, 'tmp10', None, None, ),  # 10
)
all_structs.append(pltfm_mgr_eeprom_t)
pltfm_mgr_eeprom_t.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'prod_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'prod_part_num', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'prod_ser_num', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'ext_mac_addr', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'sys_mfg_date', 'UTF8', None, ),  # 5
    (6, TType.BYTE, 'prod_ver', None, None, ),  # 6
    (7, TType.STRING, 'prod_sub_ver', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'prod_arch', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'onie_version', 'UTF8', None, ),  # 9
    (10, TType.I16, 'ext_mac_addr_size', None, None, ),  # 10
    (11, TType.STRING, 'sys_mfger', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'country_code', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'vendor_name', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'diag_version', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'serv_tag', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'asic_vendor', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'main_bd_version', 'UTF8', None, ),  # 17
    (18, TType.STRING, 'come_version', 'UTF8', None, ),  # 18
    (19, TType.STRING, 'ghc_bd0', 'UTF8', None, ),  # 19
    (20, TType.STRING, 'ghc_bd1', 'UTF8', None, ),  # 20
    (21, TType.STRING, 'resv', 'UTF8', None, ),  # 21
    (22, TType.I32, 'crc32', None, None, ),  # 22
)
all_structs.append(pltfm_mgr_pwr_supply_info_t)
pltfm_mgr_pwr_supply_info_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'vin', None, None, ),  # 1
    (2, TType.I32, 'vout', None, None, ),  # 2
    (3, TType.I32, 'iout', None, None, ),  # 3
    (4, TType.I32, 'pwr_out', None, None, ),  # 4
    (5, TType.I32, 'fspeed', None, None, ),  # 5
    (6, TType.BOOL, 'ffault', None, None, ),  # 6
    (7, TType.BOOL, 'load_sharing', None, None, ),  # 7
    (8, TType.STRING, 'model', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'serial', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'rev', 'UTF8', None, ),  # 10
    (11, TType.I32, 'iin', None, None, ),  # 11
    (12, TType.I32, 'pwr_in', None, None, ),  # 12
    (13, TType.I32, 'temp', None, None, ),  # 13
)
all_structs.append(pltfm_mgr_pwr_rail_info_t)
pltfm_mgr_pwr_rail_info_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'vrail1', None, None, ),  # 1
    (2, TType.I32, 'vrail2', None, None, ),  # 2
    (3, TType.I32, 'vrail3', None, None, ),  # 3
    (4, TType.I32, 'vrail4', None, None, ),  # 4
    (5, TType.I32, 'vrail5', None, None, ),  # 5
    (6, TType.I32, 'vrail6', None, None, ),  # 6
    (7, TType.I32, 'vrail7', None, None, ),  # 7
    (8, TType.I32, 'vrail8', None, None, ),  # 8
    (9, TType.I32, 'vrail9', None, None, ),  # 9
    (10, TType.I32, 'vrail10', None, None, ),  # 10
    (11, TType.I32, 'vrail11', None, None, ),  # 11
    (12, TType.I32, 'vrail12', None, None, ),  # 12
    (13, TType.I32, 'vrail13', None, None, ),  # 13
    (14, TType.I32, 'vrail14', None, None, ),  # 14
    (15, TType.I32, 'vrail15', None, None, ),  # 15
    (16, TType.I32, 'vrail16', None, None, ),  # 16
)
all_structs.append(pltfm_mgr_fan_info_t)
pltfm_mgr_fan_info_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'fan_num', None, None, ),  # 1
    (2, TType.I32, 'front_rpm', None, None, ),  # 2
    (3, TType.I32, 'rear_rpm', None, None, ),  # 3
    (4, TType.I32, 'percent', None, None, ),  # 4
    (5, TType.STRING, 'model', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'serial', 'UTF8', None, ),  # 6
)
all_structs.append(pltfm_mgr_cpld_info_t)
pltfm_mgr_cpld_info_t.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'cpld_count', None, None, ),  # 1
    (2, TType.STRING, 'cpld1_ver', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'cpld2_ver', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'cpld3_ver', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'cpld4_ver', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'cpld5_ver', 'UTF8', None, ),  # 6
)
all_structs.append(InvalidPltfmMgrOperation)
InvalidPltfmMgrOperation.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
)
fix_spec(all_structs)
del all_structs
